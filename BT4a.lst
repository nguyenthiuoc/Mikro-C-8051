;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 12/8/2024 11:29:10 AM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x020046  	LJMP 70
0x0003	0x020000  	LJMP 0
0x0006	0x00      	NOP
0x0007	0x00      	NOP
0x0008	0x00      	NOP
0x0009	0x00      	NOP
0x000A	0x00      	NOP
0x000B	0x020000  	LJMP 0
0x000E	0x00      	NOP
0x000F	0x00      	NOP
0x0010	0x00      	NOP
0x0011	0x00      	NOP
0x0012	0x00      	NOP
0x0013	0x020000  	LJMP 0
0x0016	0x00      	NOP
0x0017	0x00      	NOP
0x0018	0x00      	NOP
0x0019	0x00      	NOP
0x001A	0x00      	NOP
0x001B	0x020000  	LJMP 0
0x001E	0x00      	NOP
0x001F	0x00      	NOP
0x0020	0x00      	NOP
0x0021	0x00      	NOP
0x0022	0x00      	NOP
0x0023	0x020000  	LJMP 0
_delay:
;BT4a.c,23 :: 		void delay(int time) {
;BT4a.c,24 :: 		while(time--);  // Ði?u ch?nh d? tr? theo yêu c?u
L_delay0:
0x0026	0xA80E    	MOV R0, FARG_delay_time
0x0028	0xA90F    	MOV R1, FARG_delay_time+1
0x002A	0xC3      	CLR C
0x002B	0xE50E    	MOV A, FARG_delay_time
0x002D	0x9401    	SUBB A, #1
0x002F	0xF50E    	MOV FARG_delay_time, A
0x0031	0xE50F    	MOV A, FARG_delay_time+1
0x0033	0x9400    	SUBB A, #0
0x0035	0xF50F    	MOV FARG_delay_time+1, A
0x0037	0xE8      	MOV A, R0
0x0038	0x49      	ORL A, R1
0x0039	0x6002    	JZ L_delay1
0x003B	0x80E9    	SJMP L_delay0
L_delay1:
;BT4a.c,25 :: 		}
0x003D	0x22      	RET
; end of _delay
___CC2D:
;__Lib_System.c,13 :: 		
;__Lib_System.c,15 :: 		
_CC2D_Loop1:
;__Lib_System.c,16 :: 		
0x003E	0xE4      	CLR A
;__Lib_System.c,17 :: 		
0x003F	0x93      	MOVC A, @A+DPTR
;__Lib_System.c,18 :: 		
0x0040	0xF6      	MOV @R0, A
;__Lib_System.c,19 :: 		
0x0041	0x08      	INC R0
;__Lib_System.c,20 :: 		
0x0042	0xA3      	INC DPTR
;__Lib_System.c,21 :: 		
0x0043	0xD9F9    	DJNZ R1, _CC2D_Loop1
;__Lib_System.c,23 :: 		
0x0045	0x22      	RET
; end of ___CC2D
_main:
0x0046	0x75813A  	MOV SP, #58
0x0049	0x120115  	LCALL 277
;BT4a.c,27 :: 		void main() {
;BT4a.c,28 :: 		gio = 11;  // Gi? ban d?u
0x004C	0x750B0B  	MOV _gio, #11
;BT4a.c,29 :: 		phut = 0;  // Phút ban d?u
0x004F	0x750A00  	MOV _phut, #0
;BT4a.c,32 :: 		while(1) {
L_main2:
;BT4a.c,34 :: 		for(i = 0; i < 166; i++) {  // M?i giây du?c hi?n th? trong vòng l?p này
0x0052	0x750800  	MOV _i, #0
0x0055	0x750900  	MOV _i+1, #0
L_main4:
0x0058	0xC3      	CLR C
0x0059	0xE508    	MOV A, _i
0x005B	0x94A6    	SUBB A, #166
0x005D	0x7400    	MOV A, #0
0x005F	0x6480    	XRL A, #128
0x0061	0xF8      	MOV R0, A
0x0062	0xE509    	MOV A, _i+1
0x0064	0x6480    	XRL A, #128
0x0066	0x98      	SUBB A, R0
0x0067	0x4002    	JC #2
0x0069	0x01F1    	AJMP L_main5
;BT4a.c,36 :: 		chuc = gio / 10;       // Hàng ch?c c?a gi?
0x006B	0x75F00A  	MOV B, #10
0x006E	0xE50B    	MOV A, _gio
0x0070	0x84      	DIV AB
0x0071	0xF8      	MOV R0, A
0x0072	0x85000D  	MOV _chuc, 0
;BT4a.c,37 :: 		dvi = gio % 10;        // Ðon v? c?a gi?
0x0075	0x75F00A  	MOV B, #10
0x0078	0xE50B    	MOV A, _gio
0x007A	0x84      	DIV AB
0x007B	0xE5F0    	MOV A, B
0x007D	0xF8      	MOV R0, A
0x007E	0x85000C  	MOV _dvi, 0
;BT4a.c,38 :: 		LED_PORT = so[chuc];   // Hi?n th? hàng ch?c gi?
0x0081	0x7430    	MOV A, lo_addr(_so)
0x0083	0x250D    	ADD A, _chuc
0x0085	0xF8      	MOV R0, A
0x0086	0x8680    	MOV P0, @R0
;BT4a.c,39 :: 		led1 = sang;           // B?t LED 1 (Hàng gi?)
0x0088	0xC2A0    	CLR P2.B0
;BT4a.c,40 :: 		delay(1);              // Ð? tr?
0x008A	0x750E01  	MOV FARG_delay_time, #1
0x008D	0x750F00  	MOV FARG_delay_time+1, #0
0x0090	0x1126    	ACALL _delay
;BT4a.c,41 :: 		led1 = tat;            // T?t LED 1
0x0092	0xD2A0    	SETB P2.B0
;BT4a.c,43 :: 		LED_PORT = so[dvi];    // Hi?n th? don v? gi?
0x0094	0x7430    	MOV A, lo_addr(_so)
0x0096	0x250C    	ADD A, _dvi
0x0098	0xF8      	MOV R0, A
0x0099	0x8680    	MOV P0, @R0
;BT4a.c,44 :: 		led2 = sang;           // B?t LED 2 (Ðon v? gi?)
0x009B	0xC2A1    	CLR P2.B1
;BT4a.c,45 :: 		delay(1);              // Ð? tr?
0x009D	0x750E01  	MOV FARG_delay_time, #1
0x00A0	0x750F00  	MOV FARG_delay_time+1, #0
0x00A3	0x1126    	ACALL _delay
;BT4a.c,46 :: 		led2 = tat;            // T?t LED 2
0x00A5	0xD2A1    	SETB P2.B1
;BT4a.c,49 :: 		chuc = phut / 10;      // Hàng ch?c c?a phút
0x00A7	0x75F00A  	MOV B, #10
0x00AA	0xE50A    	MOV A, _phut
0x00AC	0x84      	DIV AB
0x00AD	0xF8      	MOV R0, A
0x00AE	0x85000D  	MOV _chuc, 0
;BT4a.c,50 :: 		dvi = phut % 10;       // Ðon v? c?a phút
0x00B1	0x75F00A  	MOV B, #10
0x00B4	0xE50A    	MOV A, _phut
0x00B6	0x84      	DIV AB
0x00B7	0xE5F0    	MOV A, B
0x00B9	0xF8      	MOV R0, A
0x00BA	0x85000C  	MOV _dvi, 0
;BT4a.c,51 :: 		LED_PORT = so[chuc];   // Hi?n th? hàng ch?c phút
0x00BD	0x7430    	MOV A, lo_addr(_so)
0x00BF	0x250D    	ADD A, _chuc
0x00C1	0xF8      	MOV R0, A
0x00C2	0x8680    	MOV P0, @R0
;BT4a.c,52 :: 		led3 = sang;           // B?t LED 3 (Hàng phút)
0x00C4	0xC2A2    	CLR P2.B2
;BT4a.c,53 :: 		delay(1);              // Ð? tr?
0x00C6	0x750E01  	MOV FARG_delay_time, #1
0x00C9	0x750F00  	MOV FARG_delay_time+1, #0
0x00CC	0x1126    	ACALL _delay
;BT4a.c,54 :: 		led3 = tat;            // T?t LED 3
0x00CE	0xD2A2    	SETB P2.B2
;BT4a.c,56 :: 		LED_PORT = so[dvi];    // Hi?n th? don v? phút
0x00D0	0x7430    	MOV A, lo_addr(_so)
0x00D2	0x250C    	ADD A, _dvi
0x00D4	0xF8      	MOV R0, A
0x00D5	0x8680    	MOV P0, @R0
;BT4a.c,57 :: 		led4 = sang;           // B?t LED 4 (Ðon v? phút)
0x00D7	0xC2A3    	CLR P2.B3
;BT4a.c,58 :: 		delay(1);              // Ð? tr?
0x00D9	0x750E01  	MOV FARG_delay_time, #1
0x00DC	0x750F00  	MOV FARG_delay_time+1, #0
0x00DF	0x1126    	ACALL _delay
;BT4a.c,59 :: 		led4 = tat;            // T?t LED 4
0x00E1	0xD2A3    	SETB P2.B3
;BT4a.c,34 :: 		for(i = 0; i < 166; i++) {  // M?i giây du?c hi?n th? trong vòng l?p này
0x00E3	0x7401    	MOV A, #1
0x00E5	0x2508    	ADD A, _i
0x00E7	0xF508    	MOV _i, A
0x00E9	0x7400    	MOV A, #0
0x00EB	0x3509    	ADDC A, _i+1
0x00ED	0xF509    	MOV _i+1, A
;BT4a.c,60 :: 		}
0x00EF	0x0158    	AJMP L_main4
L_main5:
;BT4a.c,63 :: 		phut++;
0x00F1	0x050A    	INC _phut
;BT4a.c,64 :: 		if(phut == 60) {  // Khi phút d?t 60, reset và tang gi?
0x00F3	0xE50A    	MOV A, _phut
0x00F5	0x643C    	XRL A, #60
0x00F7	0x700E    	JNZ L_main7
;BT4a.c,65 :: 		phut = 0;
0x00F9	0x750A00  	MOV _phut, #0
;BT4a.c,66 :: 		gio++;
0x00FC	0x050B    	INC _gio
;BT4a.c,67 :: 		if(gio == 24) {  // Khi gi? d?t 24, reset v? 0
0x00FE	0xE50B    	MOV A, _gio
0x0100	0x6418    	XRL A, #24
0x0102	0x7003    	JNZ L_main8
;BT4a.c,68 :: 		gio = 0;
0x0104	0x750B00  	MOV _gio, #0
;BT4a.c,69 :: 		}
L_main8:
;BT4a.c,70 :: 		}
L_main7:
;BT4a.c,71 :: 		}
0x0107	0x0152    	AJMP L_main2
;BT4a.c,72 :: 		}
0x0109	0x80FE    	SJMP #254
; end of _main
0x0115	0x7830    	MOV R0, 48
0x0117	0x790A    	MOV R1, 10
0x0119	0x75820B  	MOV DP0L, 11
0x011C	0x758301  	MOV DP0H, 1
0x011F	0x12003E  	LCALL 62
0x0122	0x22      	RET
;BT4a.c,0 :: ?ICS_so
0x010B	0xC0F9A4 ;?ICS_so+0
0x010E	0xB09992 ;?ICS_so+3
0x0111	0x82F880 ;?ICS_so+6
0x0114	0x90 ;?ICS_so+9
; end of ?ICS_so
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0026      [24]    _delay
0x003E       [8]    ___CC2D
0x0046     [197]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [2]    _i
0x000A       [1]    _phut
0x000B       [1]    _gio
0x000C       [1]    _dvi
0x000D       [1]    _chuc
0x000E       [2]    FARG_delay_time
0x0030      [10]    _so
0x0080       [1]    P0
0x0081       [1]    SP
0x0082       [1]    DPL
0x0083       [1]    DPH
0x00A0       [1]    P2
0x00A0       [0]    led2
0x00A0       [0]    led4
0x00A0       [0]    led3
0x00A0       [0]    led1
0x00D0       [1]    PSW
0x00E0       [1]    ACC
0x00F0       [1]    B
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x010B      [10]    ?ICS_so
//** Label List: ** 
//----------------------------------------------
  L_delay0
  L_delay1
  L_main2
  L_main3
  L_main4
  L_main5
  L_main6
  L_main7
  L_main8
  _delay
  _main
  _CC2D_Loop1
  _CC2PD_Loop1
  _CC2XD_Loop1
  ___DoIFC
  ___CC2D
  ___CC2PD
  ___CC2XD
